io分类:
     1:根据处理类型类型的不同:字节流和字符流
     2:根据流向不同:输入流和输出流
     
字符流的由来:
		因为文件编码的不同.而有了对字符流进行高效操作的字符流对象.
		原理: 其实就是基于字节流读取字节时去查了指定的码表.

字节流和字符流的区别:
 	   1:字节流读取的时候,读到一个字节就返回一个字节.
 	   字符流使用了字节流读到一个或多个字节(中文对应的字节数是2个,
 	   在utf-8码表是3个.先去查指定的码表,将查到的字符返回).
 	   2:字节流可以处理所有类型数据,如图片,MP3,avi.
 	     而字符流只能处理字符数据.
 	
 	结论:只要处理纯文本数据,就要优先考虑使用字符流.
 	    除此之外都用字节流.     
 	     		     
处理字节流的两大父类:
    读:InputStream(输入流)
    写:OutputStream(输出流)	
处理字符流的两大父类:
    读:Reader
    写:Writer  
    
/** flush和close用法  */
多数时候，如果你最后会调用一次close方法，flush方法是可以不使用的，除非你明确的想使数据尽早写到磁盘或者网络上。 
close会自动flush，什么时候都不用调用。 

1、你这题问的有点。。。
2、一般只有在“I/O流“的时候，用到flush。
3、用流的时候，往往有缓冲区，只有缓冲区慢的时候，才会将缓冲区里的数据写入到文件中去，只要文件不满或是没有调用flush或是close方法的话，
是没法将不满缓冲区的数据写入文件中去的，可以参考我的博客文章
http://hi.baidu.com/erliang20088/blog/item/32440c0e3ea39c96d53f7ca8.html
4、所以，当你使用流时，又不能用一次就close的话，一定要每次使用append或print或write的之后，要flush一下，保证数据都能写入文件当中去。
5、至于具体用法，很简单，流对象.flush()就可以了。

你说的是flush()函数吧。
flush() 是把缓冲区的数据强行输出，(注意不要和frush()刷新混淆了)
主要用在IO中，即清空缓冲区数据，一般在读写流(stream)的时候，数据是先被读到了内存中，再把数据写到文件中，
当你数据读完的时候不代表你的数据已经写完了，因为还有一部分有可能会留在内存这个缓冲区中。这时候如果你调用了close()方法关闭了读写流，
 那么这部分数据就会丢失，所以应该在关闭读写流之前先flush()。

/*  
流操作的基本规律。  
一、两个明确：(明确体系)  
1. 明确源和目的  
    源：输入流  InputStream  Reader  
    目的：输出流  OutputStream Writer  
  
2. 操作的数据是否是纯文本  
    是： 字符流  
    否： 字节流  
二、明确体系后要明确具体使用的对象  
    通过设备区分：内存，硬盘，键盘  
    目的设备：内存，硬盘，控制台  
  
  
示例1：将一个文本文件中的数据存储到另一个文件中: 复制文件  
    一、明确体系  
        源：文件-->读取流-->(InputStream和Reader)  
        是否是文本：是-->Reader  
          
          
        目的：文件-->写入流-->(OutputStream Writer)  
        是否纯文本：是-->Writer  
      
    二、 明确设备  
        源：Reader  
            设备：硬盘上一个文本文件 --> 子类对象为：FileReader  
                FileReader fr = new FileReader("Goods.txt");  
              
            是否提高效率：是-->加入Reader中的缓冲区：BufferedReader  
                BufferedReader bufr = new BufferedReader(fr);  
                  
        目的：Writer  
            设备：键盘上一个文本文件 --> 子类对象：FileWriter  
                FileWriter fw = new FileWriter("goods1.txt");  
            是否提高效率：是-->加入Writer的缓冲区：BufferedWriter  
                BufferedWriter bufw = new BufferedWriter(fw);  
              
              
              
示例2：将一个图片文件数据复制到另一个文件中：复制文件  
    一、明确体系  
        源：文件-->读取流-->(InputStream和Reader)  
        是否是文本：否-->InputStream  
          
          
        目的：文件-->写入流-->(OutputStream Writer)  
        是否纯文本：否-->OutputStream  
      
    二、 明确设备  
        源：InputStream  
            设备：硬盘上一个媒体文件 --> 子类对象为：FileInputStream  
                FileInputStream fis = new FileInputStream("Goods.txt");  
              
            是否提高效率：是-->加入InputStream中的缓冲区：BufferedInputStream  
                BufferedInputStream bufi = new BufferedInputStream(fis);  
                  
        目的：OutputStream  
            设备：键盘上一个媒体文件 --> 子类对象：FileOutputStream  
                FileOutputStream fos = new FileOutputStream("goods1.txt");  
            是否提高效率：是-->加入OutputStream的缓冲区：BufferedOutputStream  
                BufferedOutputStream bufo = new BufferedOutputStream(fw);  
  
示例3：将键盘录入的数据保存到一个文本文件中  
    一、明确体系  
        源：键盘-->读取流-->(InputStream和Reader)  
        是否是文本：是-->Reader  
          
          
        目的：文件-->写入流-->(OutputStream Writer)  
        是否纯文本：是-->Writer  
      
    二、 明确设备  
        源：InputStream  
            设备：键盘 --> 对用对象为：System.in --> InputStream  
                为了操作方便，转成字符流Reader --> 使用Reader中的转换流：InputStreamReader  
                InputStreamReader isr = new InputStreamReader(System.in);  
              
            是否提高效率：是-->加入Reader中的缓冲区：BufferedReader  
                BufferedReader bufr = new BufferedReader(isr);  
                  
        目的：Writer  
            设备：键盘上一个文本文件 --> 子类对象：FileWriter  
                FileWriter fw = new FileWriter("goods1.txt");  
            是否提高效率：是-->加入Writer的缓冲区：BufferedWriter  
                BufferedWriter bufw = new BufferedWriter(fw);         		     
 	     		     